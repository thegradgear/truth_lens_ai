
// This file is generated by Gemini. DO NOT EDIT.
'use server';
/**
 * @fileOverview Generates a fake news article given a topic, category, and tone.
 *
 * - generateFakeNewsArticle - A function that handles the fake news article generation.
 * - GenerateFakeNewsArticleInput - The input type for the generateFakeNewsArticle function.
 * - GenerateFakeNewsArticleOutput - The return type for the generateFakeNewsArticle function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateFakeNewsArticleInputSchema = z.object({
  topic: z.string().describe('The topic of the fake news article.'),
  category: z.string().describe('The category of the fake news article.'),
  tone: z.string().describe('The tone of the fake news article.'),
});
export type GenerateFakeNewsArticleInput = z.infer<typeof GenerateFakeNewsArticleInputSchema>;

const GenerateFakeNewsArticleOutputSchema = z.object({
  title: z.string().describe('The catchy, AI-generated headline for the fake news article.'),
  article: z.string().describe('The body content of the generated fake news article.'),
});
export type GenerateFakeNewsArticleOutput = z.infer<typeof GenerateFakeNewsArticleOutputSchema>;

export async function generateFakeNewsArticle(
  input: GenerateFakeNewsArticleInput
): Promise<GenerateFakeNewsArticleOutput> {
  try {
    return await generateFakeNewsArticleFlow(input);
  } catch (error: any) {
    console.error("Error in generateFakeNewsArticle flow execution:", error);
    throw new Error(`Failed to generate article: ${error.message || 'An unexpected error occurred in the article generation flow.'}`);
  }
}

const prompt = ai.definePrompt({
  name: 'generateFakeNewsArticlePrompt',
  input: {schema: GenerateFakeNewsArticleInputSchema},
  output: {schema: GenerateFakeNewsArticleOutputSchema},
  prompt: `You are a professional fake news article writer.

You will be provided with a topic, category, and tone.

You MUST generate a catchy and relevant headline (title) for the article.
You will write a fake news article based on the topic, category, and tone.

Topic: {{{topic}}}
Category: {{{category}}}
Tone: {{{tone}}}

Headline: 
Article: `,
   // Basic safety settings - adjust as needed
  config: {
    safetySettings: [
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
    ],
  },
});

const generateFakeNewsArticleFlow = ai.defineFlow(
  {
    name: 'generateFakeNewsArticleFlow',
    inputSchema: GenerateFakeNewsArticleInputSchema,
    outputSchema: GenerateFakeNewsArticleOutputSchema,
  },
  async input => {
    try {
      const {output, candidates} = await prompt(input);
      if (!output || !output.article || !output.title) {
        if (candidates && candidates.length > 0) {
            const firstCandidate = candidates[0];
            if (firstCandidate.finishReason === 'SAFETY') {
                console.warn('Article generation blocked by safety filters for input:', input, 'Finish message:', firstCandidate.finishMessage);
                throw new Error("The AI could not generate an article for this topic due to safety content policies. Please try a different topic.");
            }
            if (firstCandidate.finishReason === 'RECITATION') {
                 console.warn('Article generation blocked due to recitation policy for input:', input, 'Finish message:', firstCandidate.finishMessage);
                throw new Error("The AI could not generate an article as it might resemble copyrighted material. Please try a different topic.");
            }
        }
        console.error('Article generation failed: AI did not return a valid article structure (title and/or body missing) for input:', input);
        throw new Error('AI model did not return a complete article (title or body). Please try modifying your input or try again later.');
      }
      return output;
    } catch (error: any) {
        console.error("Error during article generation prompt execution:", error);
        if (error instanceof Error && (error.message.includes("safety content policies") || error.message.includes("copyrighted material") || error.message.includes("AI model did not return a complete article"))) {
            throw error; // Re-throw specific errors
        }
        throw new Error(`Article generation encountered an issue: ${error.message || 'Unknown error'}. Please try again.`);
    }
  }
);

